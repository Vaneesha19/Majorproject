// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int        @id @default(autoincrement())
  email String  @unique
  password String 
  isSocialLogin Boolean? @default(false)
  username String? @unique
  fullName String?
  description String?
  profileImage String?
  isProfileInfoSet Boolean? @default(false)
  createdAt DateTime @default(now())

  gigs Gigs[]
  reviews Reviews[]
  messagesSent Message[] @relation("sentMessages")
  messagesReceived Message[] @relation("receivedMessages")

  virtualBalance Float @default(0.0) 
  buyerOrders  Orders[] @relation(name: "BuyerOrders")
  sellerOrders Orders[] @relation(name: "SellerOrders")
}

model Admin {
  id Int @id @default(1)
  adminBalance Float @default(0.0) // üõ†Ô∏è Holds the escrow balance
}

model Gigs {
  id Int @id @default(autoincrement())
  title String 
  description String
  category String
  deliveryTime Int
  revisions Int
  features String[]
  price Int
  shortDesc String
  createdAt DateTime @default(now())
  images String[]

  createdBy User @relation(fields: [userId], references: [id], onDelete: Cascade) // ‚úÖ Correct placement
  userId Int

  orders Orders[]
  reviews Reviews[]
}

model Orders {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  buyer User @relation(name: "BuyerOrders", fields: [buyerId], references: [id], onDelete: Cascade) // ‚úÖ Correct placement
  buyerId Int

  seller User @relation(name: "SellerOrders", fields: [sellerId], references: [id], onDelete: Cascade) // ‚úÖ Correct placement
  sellerId Int

  gig Gigs @relation(fields: [gigId], references: [id], onDelete: Cascade) // ‚úÖ Correct placement
  gigId Int

  price Int
  messages Message[]
  isApproved Boolean @default(false)
  paymentIntent String? @unique // üõ†Ô∏è Stripe payment ID
}

model Reviews {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  rating Int
  reviewText String?

  gig Gigs @relation(fields: [gigId], references: [id], onDelete: Cascade) // ‚úÖ Correct placement
  gigId Int

  reviewer User @relation(fields: [reviewerId], references: [id], onDelete: Cascade) // ‚úÖ Correct placement
  reviewerId Int
} 

model Message {
  id Int @id @default(autoincrement())
  text String
  createdAt DateTime @default(now())
  isRead Boolean @default(false)

  sender User @relation("sentMessages", fields: [senderId], references: [id], onDelete: Cascade) // ‚úÖ Correct placement
  senderId Int

  recipient User @relation("receivedMessages", fields: [recipientId], references: [id], onDelete: Cascade) // ‚úÖ Correct placement
  recipientId Int

  order Orders @relation(fields: [orderId], references: [id], onDelete: Cascade) // ‚úÖ Correct placement
  orderId Int
}
